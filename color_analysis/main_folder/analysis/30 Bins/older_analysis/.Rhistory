import mpz
cd ~/Downloads
cd ~\Downloads
cd ~Downloads
library(patternize)
cd ~ Downloads
dir /Downloads
library(devtools)
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# Installing recolorize & other packages used in these examples
install.packages("devtools")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
library(cli)
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
install.packages("cli")
install.packages("cli")
install.packages("cli")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
install.packages("cli")
install.packages("cli")
install.packages("cli")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# Installing recolorize & other packages used in these examples
install.packages("devtools")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli", lib="C:/Program Files/R/R-4.1.0/library")
# Installing recolorize & other packages used in these examples
install.packages("devtools")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
library(cli)
detach("package:cli", unload = TRUE)
remove.packages("cli", lib="~/R/win-library/4.1")
install.packages("cli")
install.packages("cli")
install.packages("cli", lib="C:/Program Files/R/R-4.1.0/library")
library(cli, lib.loc = "C:/Program Files/R/R-4.1.0/library")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
library(cli, lib.loc = "C:/Program Files/R/R-4.1.0/library")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize") force = TRUE
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize", force = TRUE)
devtools::install_github("StevenVB12/patternize")
library(patternize)
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/4.1")
install.packages("rlang", lib="C:/Program Files/R/R-4.1.0/library")
devtools::install_github("StevenVB12/patternize")
install.packages("magrittr", lib="C:/Program Files/R/R-4.1.0/library")
devtools::install_github("StevenVB12/patternize")
devtools::install_github("StevenVB12/patternize", force=t)
devtools::install_github("StevenVB12/patternize", force = TRUE)
version
getwd()
library(recolorize)
library(patternize)
library(viridisLite)
library(raster)
setwd("C:/Users/mhack/Dropbox (Medgar Evers College)/Dyad/Matt Pero≈°/Dyad Color Analysis/images/30 Bins")
#########################Territorial#####################################
list <- tools::file_path_sans_ext(dir("output/fc/yellow/face/quiver male/t", ".png"))
imageList <- makeList(list, type = "image",
prepath = "output/fc/yellow/face/quiver male/t",
extension = ".png")
reg <- alignReg(imageList, resampleFactor = NULL, target = imageList[[15]],
plotTransformed = F )
outline<-read.table(file.choose(), header=F)
t<-reg[[15]]
#RGB <- sampleRGB(imageListBM[[1]], resampleFactor = NULL, crop = c(0,0,0,0), type= "point")
RGB_pos <- c(64,255,64)
#RGB <- sampleRGB(imageListBM[[1]], resampleFactor = NULL, crop = c(0,0,0,0), type= "point")
#RGB_pos <- c(64,255,64)
#RGB_neg <- sampleRGB(imageListBM[[1]], resampleFactor = NULL, crop = c(0,0,0,0), type= "point")
pat<- patRegRGB(reg, t, RGB_pos, resampleFactor=NULL, useBlockPercentage=100,
colOffset=0.05, crop=c(0,0,0,0), removebgR=NULL, maskOutline=NULL,
focal=FALSE, sigma=3, iterations=0, patternsToFile=NULL, plot = F )
sum <- sumRaster(pat,list, type = 'RGB')
#colfunc <- c("yellow","lightyellow","black","pink","red")
{png(paste0("output/fc/yellow/face/quiver male_t_pos.png"))
plotHeat(sum, list, plotCartoon = T, outline = outline, crop = c(0,0,0,0),
cartoonID = 'NT_43', cartoonFill = F, refShape = 'target', legend.side = 4,
lines = NULL, landList = NULL, adjustCoords = F, imageList = imageList,
colpalette= RColorBrewer::brewer.pal(8,'Greens'), refImage=imageList[[15]], ,
cartoonOrder = 'under', legendTitle = 'Similarity', flipRaster = 'x', flipOutline ="y", legend=F)
dev.off()
}
#RGB <- sampleRGB(imageListBM[[1]], resampleFactor = NULL, crop = c(0,0,0,0), type= "point")
#RGB_pos <- c(64,255,64)
#RGB_neg <- sampleRGB(imageListBM[[1]], resampleFactor = NULL, crop = c(0,0,0,0), type= "point")
pat<- patRegRGB(reg, t, RGB_pos, resampleFactor=NULL, useBlockPercentage=100,
colOffset=0.05, crop=c(0,0,0,0), removebgR=NULL, maskOutline=NULL,
focal=FALSE, sigma=3, iterations=0, patternsToFile=NULL, plot = T )
#RGB <- sampleRGB(imageListBM[[1]], resampleFactor = NULL, crop = c(0,0,0,0), type= "point")
#RGB_pos <- c(64,255,64)
#RGB_neg <- sampleRGB(imageListBM[[1]], resampleFactor = NULL, crop = c(0,0,0,0), type= "point")
pat<- patRegRGB(reg, t, RGB_pos, resampleFactor=NULL, useBlockPercentage=100,
colOffset=0.05, crop=c(0,0,0,0), removebgR=NULL, maskOutline=NULL,
focal=FALSE, sigma=3, iterations=0, patternsToFile=NULL, plot = 'stack' )
#plotHeat(sum, list, plotCartoon = T, outline = outline, crop = c(0,0,0,0),
#         cartoonID = 'NT_43', cartoonFill = F, refShape = 'target', legend.side = 4,
#         lines = NULL, landList = NULL, adjustCoords = F, imageList = imageList,
#         colpalette= RColorBrewer::brewer.pal(8,'Greens'), refImage=imageList[[1]], ,
#         cartoonOrder = 'under', legendTitle = 'Similarity', flipRaster = 'x', flipOutline ="y", legend=F)
#
#
#  dev.off()
#}}
##############################Non-Territorial#################################
list <- tools::file_path_sans_ext(dir("output/fc/yellow/face/bite female/nt", ".png"))
imageList <- makeList(list, type = "image",
prepath = "output/fc/yellow/face/bite female/nt",
extension = ".png")
reg <- alignReg(imageList, resampleFactor = NULL, target = imageList[[9]],
plotTransformed = F )
t<-imageList[[9]]
#RGB <- sampleRGB(imageListBM[[1]], resampleFactor = NULL, crop = c(0,0,0,0), type= "point")
#RGB_pos <- c(64,255,64)
{pat<- patRegRGB(reg, t, RGB_pos, resampleFactor=NULL, useBlockPercentage=100,
colOffset=0.05, crop=c(0,0,0,0), removebgR=NULL, maskOutline=NULL,
focal=FALSE, sigma=3, iterations=0, patternsToFile=NULL, plot = 'stack' )
sum <- sumRaster(pat,list, type = 'RGB')
#colfunc <- c("yellow","lightyellow","black","pink","red")
{png(paste0("output/fc/yellow/face/quiver male_nt_pos.png"))
plotHeat(sum, list, plotCartoon = T, outline = outline, crop = c(0,0,0,0),
cartoonID = 'NT_14', cartoonFill = F, refShape = 'target', legend.side = 4,
lines = NULL, landList = NULL, adjustCoords = F, imageList = imageList,
colpalette= RColorBrewer::brewer.pal(8,'Greens'), refImage=imageList[[9]], ,
cartoonOrder = 'under', legendTitle = 'Similarity', flipRaster = 'x', flipOutline ="y", legend=F)
dev.off()
}}
