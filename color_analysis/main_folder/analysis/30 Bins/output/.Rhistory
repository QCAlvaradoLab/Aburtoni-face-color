import mpz
cd ~/Downloads
cd ~\Downloads
cd ~Downloads
library(patternize)
cd ~ Downloads
dir /Downloads
library(devtools)
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# Installing recolorize & other packages used in these examples
install.packages("devtools")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
library(cli)
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
install.packages("cli")
install.packages("cli")
install.packages("cli")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
install.packages("cli")
install.packages("cli")
install.packages("cli")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# Installing recolorize & other packages used in these examples
install.packages("devtools")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli", lib="C:/Program Files/R/R-4.1.0/library")
# Installing recolorize & other packages used in these examples
install.packages("devtools")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
library(cli)
detach("package:cli", unload = TRUE)
remove.packages("cli", lib="~/R/win-library/4.1")
install.packages("cli")
install.packages("cli")
install.packages("cli", lib="C:/Program Files/R/R-4.1.0/library")
library(cli, lib.loc = "C:/Program Files/R/R-4.1.0/library")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
library(cli, lib.loc = "C:/Program Files/R/R-4.1.0/library")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize")
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize") force = TRUE
# install development version of recolorize and patternize:
devtools::install_github("hiweller/recolorize", force = TRUE)
devtools::install_github("StevenVB12/patternize")
library(patternize)
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/4.1")
install.packages("rlang", lib="C:/Program Files/R/R-4.1.0/library")
devtools::install_github("StevenVB12/patternize")
install.packages("magrittr", lib="C:/Program Files/R/R-4.1.0/library")
devtools::install_github("StevenVB12/patternize")
devtools::install_github("StevenVB12/patternize", force=t)
devtools::install_github("StevenVB12/patternize", force = TRUE)
version
getwd()
setwd("C:/Users/mhack/Dropbox (Medgar Evers College)/Dyad/Matt Pero≈°/Dyad Color Analysis/images/output")
csv_list <- c(choose.files())
template <- read.csv(csv_list[[1]], header=F)
View(template)
container <- dplyr::select(template, V1)
View(container)
{for (i in 1:length(csv_list)){
csv <- read.csv(csv_list[[i]], header = F)
csv <- dplyr::select(csv, V1, V3)
container <- dplyr::left_join(container, csv, by="V1")
}
write.csv2(container, file = "yellow_top_30.csv")
}
View(container)
csv_list <- c(choose.files())
template <- read.csv(csv_list[[1]], header=F)
container <- dplyr::select(template, V1)
{for (i in 1:length(csv_list)){
csv <- read.csv(csv_list[[i]], header = F)
csv <- dplyr::select(csv, V1, V3)
container <- dplyr::left_join(container, csv, by="V1")
}
write.csv2(container, file = "blue_top_30.csv")
}
csv_list <- c(choose.files())
template <- read.csv(csv_list[[1]], header=F)
container <- dplyr::select(template, V1)
{for (i in 1:length(csv_list)){
csv <- read.csv(csv_list[[i]], header = F)
csv <- dplyr::select(csv, V1, V3)
container <- dplyr::left_join(container, csv, by="V1")
}
write.csv2(container, file = "blue_bottom_30.csv")
}
csv_list <- c(choose.files())
template <- read.csv(csv_list[[1]], header=F)
container <- dplyr::select(template, V1)
{for (i in 1:length(csv_list)){
csv <- read.csv(csv_list[[i]], header = F)
csv <- dplyr::select(csv, V1, V3)
container <- dplyr::left_join(container, csv, by="V1")
}
write.csv2(container, file = "yellow_bottom_30.csv")
}
csv_list <- c(choose.files())
csv_list <- c(choose.files())
template <- read.csv(csv_list[[1]], header=F)
container <- dplyr::select(template, V1)
{for (i in 1:length(csv_list)){
csv <- read.csv(csv_list[[i]], header = F)
csv <- dplyr::select(csv, V1, V3)
container <- dplyr::left_join(container, csv, by="V1")
}
write.csv2(container, file = "yellow_whole_30.csv")
}
csv_list <- c(choose.files())
template <- read.csv(csv_list[[1]], header=F)
container <- dplyr::select(template, V1)
{for (i in 1:length(csv_list)){
csv <- read.csv(csv_list[[i]], header = F)
csv <- dplyr::select(csv, V1, V3)
container <- dplyr::left_join(container, csv, by="V1")
}
write.csv2(container, file = "yellow_whole_30.csv")
}
csv_list <- c(choose.files())
template <- read.csv(csv_list[[1]], header=F)
container <- dplyr::select(template, V1)
{for (i in 1:length(csv_list)){
csv <- read.csv(csv_list[[i]], header = F)
csv <- dplyr::select(csv, V1, V3)
container <- dplyr::left_join(container, csv, by="V1")
}
write.csv2(container, file = "blue_whole_30.csv")
}
